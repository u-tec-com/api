-FORMAT: 1A
HOST: https://api.u-tec.com/

# Ultraloq API

The Ultraloq API connects Ultraloq system to 3rd IOT platform.

# Group A RESTful Service
The Ultraloq API is a [RESTful](http://en.wikipedia.org/wiki/Representational_state_transfer) service.

## Authentication
Nearly every request to the Ultraloq API requires an OAuth bearer token.

Exceptions to this rule will be documented.

## Content types
Nearly every request to the Ultraloq API should be expressed as JSON.

Nearly every response from the Ultraloq API will be expressed as JSON.

Exceptions to this rule will be documented.

## HTTP verbs
The Ultraloq API uses HTTP verbs in pretty standard ways:

- GET for retrieving information without side-effects
- PUT for updating existing resources, with partial-update semantics supported
- POST for creating new resources or blind upserts of existing resources
- DELETE for destructive operations on existing resurces

## Identifiers
All objects in the Ultraloq API can be identified by `object_type` and `object_id`. The `object_id` is a string and not globally unique, currently. That is there can be an `'object_type':'light_bulb'` and `'object_id':'abc'` and an `'object_type':'thermostat'` and `'object_id':'abc'`

It is possible for the API to re-assign identifiers to resources to rebalance keys; in this case, your resource will still exist but it (and all references to it) will be updated to the new identifier.  Your application should be able to handle this case.

## Creatable vs. permanent
The term "creatable" will describe a resource which may be created and/or destroyed by the user.

The term "permanent" will describe a resource which may not be directly created or deleted by a user.

Note that permanent **does not imply** that the resource will always exist, just that the user may not create or destroy it.  Under no circumstances should you assume that a resource will always exist.

## Mutable vs. immutable
The term "mutable" will describe a resource or attribute which the user may modify at will, assuming the user has the necessary permissions to do so.

The term "immutable" will describe a resouce or attribute which may not be modified directly by the user.

Note that immutable **does not imply** that the resource or attribute will never change, just that the user may not directly change it.  Under no circumstances should you assume that a resource or attribute will always remain the same.

## Error states
The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used.

# Group OAuth
Authentication to the API

The Ultraloq API uses [OAuth2](https://tools.ietf.org/html/rfc6749).

Typically your application should use the OAuth2 authorization code grant.

Note that unlike most other calls, these calls do not require (and in fact should not use) an OAuth 2.0 bearer token.

## Authorization page [/oauth2/authorize?response_type=code&client_id=<client_id>&redirect_uri=<redirect_uri>&state=<state>]
### Obtain user authorization to use your application with their Ultraloq account [GET]

Please see the OAuth2 specification for more information about the use of authorization code grant and the state parameter.
Your application's redirect URIs should be registered with Ultraloq for the security of the user.

+ Request Retrieve authorization URL

+ Response 200 (text/html)

## Obtain access token [/oauth2/token]
### Obtain access token from authorization code grant [POST]

Please see the OAuth2 specification for more information about the use of the authorization code grant.

+ Request Obtain access token from redirect flow (application/json)

        {
            "client_secret": "client_secret_goes_here",
            "grant_type": "authorization_code",
            "code": "code_from_redirect_to_your_provided_redirect_uri"
        }

+ Response 201 (application/json)

        {
            "data": {
                "access_token": "example_access_token_like_135fhn80w35hynainrsg0q824hyn",
                "refresh_token": "crazy_token_like_240qhn16hwrnga05euynaoeiyhw52_goes_here",
                "token_type": "bearer"
            }
        }

### Refresh an expired access token [POST]

+ Request Refresh expired access token (application/json)

        {
            "client_id": "client_id_goes_here",
            "client_secret": "client_secret_goes_here",
            "grant_type": "refresh_token",
            "refresh_token": "crazy_token_like_240qhn16hwrnga05euynaoeiyhw52_goes_here"
        }

+ Response 201 (application/json)

        {
            "data": {
                "access_token": "example_access_token_like_135fhn80w35hynainrsg0q824hyn",
                "refresh_token": "crazy_token_like_240qhn16hwrnga05euynaoeiyhw52_goes_here",
                "token_type": "bearer"
            }
        }


## Questions Collection [/questions]

### List All Questions [GET]

+ Response 200 (application/json)

        [
            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 2048
                    }, {
                        "choice": "Python",
                        "votes": 1024
                    }, {
                        "choice": "Objective-C",
                        "votes": 512
                    }, {
                        "choice": "Ruby",
                        "votes": 256
                    }
                ]
            }
        ]

### Create a New Question [POST]

You may create your own question using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ]
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 0
                    }, {
                        "choice": "Python",
                        "votes": 0
                    }, {
                        "choice": "Objective-C",
                        "votes": 0
                    }, {
                        "choice": "Ruby",
                        "votes": 0
                    }
                ]
            }
# Group Ultraloq
Lock device management

## Locks  [/device/locks]
### Get all locks [GET]

Get all locks of current user

+ Response 200 (application/json)

        [
            {
                "uuid": "aa:bb:cc:dd:ee:ff",
                "name": "Front door",
                "model": "UL1",
                "type": "1001",
                "photo": "xx",
                "status":1,
                "params":
                {
                    "uid":12345,
                    "password":778833,
                    "ptype":1,
                    "bridge_uuid":"aa:bb:cc:dd:ee:ff",
                    "bridge_status":0
                }
            },
        ]

### Add a new lock [POST]

Add a lock to user house
image is optional
group_id is optional

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
            "name": "Front door",
            "model": "UL1",
            "uid":12345,        //id of administrator
            "password":778833,  
            "photo": "BASE64_OF_IMAGE_DATA",
            "version":"V0101.1001",
            "version_bt":"V0101.1002",
            "version_other":"V0101.1003",
        }

+ Response 200 (application/json)

        {
        }

## Lock check [/device/lock/is_shared]

### May I add the lock [GET]

Check the lock is added by others

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
        }

+ Response 200 (application/json)

        {
            "bind": 1,
            "users": "EMAIL_OF_THE_USER"
        }

## Lock [/device/lock/lock_uuid]

### Get a lock [GET]

Get the lock of this user

+ Response 200 (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
            "name": "Front door",
            "model": "UL1",
            "type": "1001",
            "photo": "xx",
            "status":1,
            "params":
                {
                    "uid":12345,
                    "password":778833,
                    "ptype":1,
                    "bridge_uuid":"aa:bb:cc:dd:ee:ff",
                    "bridge_status":0
                }
        }



### Update a lock [PUT]
Update the lock information

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
            "name": "Front door",
            "photo": "BASE64_OF_IMAGE",
        }

+ Response 200 (application/json)

        {
        }


### Delete a lock [DELETE]

Delete a lock from user lock list

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
        }

+ Response 200 (application/json)

        {
        }


## unLock  [/device/lock/unlock]
### Unlock a lock [POST]

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
        }

+ Response 200 (application/json)

        {
        }


## Work mode  [/device/lock/mode]
### Normal/Lockout/Passenger [POST]

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
            "mode": "Normal"
        }

+ Response 200 (application/json)

        {
        }


## Status  [/device/lock/status]

### Get lock current status [GET]

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
        }

+ Response 200 (application/json)

        {
            "date": 153477,    //current ts of lock
            "is_lock": 1,   //is locked
            "mode": "Normal",
            "battery": "full",
            "is_alarmed": 1,
            "is_online": 1,
        }

## Lock Users [/device/lock/users]
### Get all users of this lock [GET]

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
        }
        
+ Response 200 (application/json)

        [
            {
                "uuid": "aa:bb:cc:dd:ee:ff",
                "uid": 778833,
                "name": "alice",
                "photo": "BASE64_OF_USER_IMAGE",
                "type": 1,          //0-general user, 1-administrator
                "ptype":1,  //1:finger 2：pin code 4：rfid card 8：app 16: remote
                "Password_number": 1,
                "Finger_number": 1,
                "Card_number": 1,
                "Email": "alice@u-tec.com".
                "Is_share": 0,
                "Share_status": 1,
                "Share_type": 0,
                "Share_start_date": "2018-1-1 10:10:00",
                "Share_end_date": "2018-2-1 10:10:00",
                "Share_week": "1,3,5,7",
                "Share_start_time": "8:00:00",
                "Share_end_time": "10:00:00",
                "Share_times": 5,
                "Share_times_used": 3
            }
        ]
        
        
### Add [POST]

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
            "uid": 778833,
            "name": "alice",
            "photo": "BASE64_OF_USER_IMAGE",
            "type": 1,          //0-general user, 1-administrator
            "status": 1,        //1-normal, 0-disable
            "finger":  "FINGER_DATA",       //1-has finger, 0-no finger
            "password": "778833"
            "cardid":   "882244"
        }

+ Response 200 (application/json)

        {
            "date": 153477,    //current ts of lock
            "is_lock": 1,   //is locked
            "mode": "Normal",
            "battery": "full",
            "is_alarmed": 1,
            "is_online": 1,
        }


## Lock User [/device/lock/user/user_id]

### Get a lock User Info [GET]

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
        }
        
+ Response 200 (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
            "uid": 778833,
            "name": "alice",
            "photo": "BASE64_OF_USER_IMAGE",
            "type": 1,          //0-general user, 1-administrator
            "ptype":1,  //1:finger 2：pin code 4：rfid card 8：app 16: remote
            "Password_number": 1,
            "Finger_number": 1,
            "Card_number": 1,
            "Email": "alice@u-tec.com".
            "Is_share": 0,
            "Share_status": 1,
            "Share_type": 0,
            "Share_start_date": "2018-1-1 10:10:00",
            "Share_end_date": "2018-2-1 10:10:00",
            "Share_week": "1,3,5,7",
            "Share_start_time": "8:00:00",
            "Share_end_time": "10:00:00",
            "Share_times": 5,
            "Share_times_used": 3
        }
        
    
### Update [PUT]

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
            "uid": 778833,
            "name": "alice",
            "photo": "BASE64_OF_USER_IMAGE",
            "type": 1,          //0-general user, 1-administrator
            "status": 1,        //1-normal, 0-disable
        }
        
+ Response 200 (application/json)

        {
        }
        
### Delete [DELETE]

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
            "uid": 778833,
        }
        
+ Response 200 (application/json)

        {
        }
                

## Lock User ids [/device/lock/user-ids]
### Add an id [POST]

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
            "uid": 778833,
            "password": "123456",
            "finger": "BASE64_OF_FINGER_PRINTER",       //optional
            "card": "123456",       //optional
       }
        
+ Response 200 (application/json)

        {
        }

### Get ids [GET]

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
            "uid": 778833,
        }
        
+ Response 200 (application/json)

        {
            "password": "123456",
            "finger": "BASE64_OF_FINGER_PRINTER",
            "card": "123456",
        }


### Update [PUT]

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
            "uid": 778833,
            "password": "123456",
            "finger": "BASE64_OF_FINGER_PRINTER",       //optional
            "card": "123456",       //optional
        }
        
+ Response 200 (application/json)

        {
        }


### Delete [DELETE]

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
            "uid": 778833,
            "ptype":1,  //1:finger 2：pin code 4：rfid card 
        }
        
+ Response 200 (application/json)

        {
           
        }


## User Shifts [/device/lock/user-shifts]
### Get all shifts of user [GET]

Get lock user shifts

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
            "uid": 778833
        }
        
+ Response 200 (application/json)

        [
            {
                "shift_id":33455,
                "shift_type":"time_limited",
                "start_time": "8:00:00",
                "end_time": "10:00:00",
            },
            {
                "shift_id":33456,
                "shift_type":"count_limited",
                "limited": 5,
                "used": 3,
            },
            {
                "shift_id":33457,
                "shift_type":"date_limited",
                "start_date": "2018-01-10 8:00:00",
                "end_date": "2018-02-10 8:00:00",
            },
            
        ]


### Add a shift [PUT]
Add a shift to lock user

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
            "uid": 778833
        }
        
+ Response 200 (application/json)

        [
            {
                "shift_type":"time_limited",
                "start_time": "8:00:00",
                "end_time": "10:00:00",
            },
            {
                "shift_type":"count_limited",
                "limited": 5,
                "used": 3,
            },
            {
                "shift_type":"date_limited",
                "start_date": "2018-01-10 8:00:00",
                "end_date": "2018-02-10 8:00:00",
            },
            
        ]


## User Shift [/device/lock/user-shift/shift_id]

### Update [PUT]

+ Request (application/json)

        {
            "start_time": "8:00:00",
            "end_time": "10:00:00",
        },
        
+ Response 200 (application/json)

        {
        }


### Delete [DELETE]

+ Request (application/json)

        {
            "uuid": "aa:bb:cc:dd:ee:ff",
            "uid": 778833
        }
        
+ Response 200 (application/json)

        {
        }

## Schedule [/device/schedule]
All locks in this group shoud do some action in scheduled time
### Add [PUT]
### List [GET]
### Update [PUT]
### Delete [DELETE]

# Group UBell
## Info  [/device/doorbell]
### Add [PUT]
### List [GET]
### Update [POST]
### Delete [DELETE]
## Snap [/device/doorbell/snap]
### Snap [GET]

# Group UCam
## Camera  [/device/camera]
### Add [PUT]
### List [GET]
### Update [POST]
### Delete [DELETE]
## Snap [/device/camera/snap]
### Snap [GET]

# Group USensor
## Sensor  [/device/sensor]
### Add [PUT]
### List [GET]
### Update [POST]
### Delete [DELETE]
## Status  [/device/sensor/status]
### Alarm Out [PUT]
### Status [GET]

# Group User Management

## Info [/user/user]
### Add [PUT]
### List [GET]
### Update [POST]
### Delete [DELETE]

## Role [/user/role]
### Add [PUT]
### List [GET]
### Update [POST]
### Delete [DELETE]

## Assignment [/user/assign]
### Add [PUT]
### List [GET]
### Update [POST]
### Delete [DELETE]
 
# Group Time Shift
## Schedule [/schedule]
### Add [PUT]
### List [GET]
### Update [POST]
### Delete [DELETE]

# Group Event
## Notify [/notify]
### Add [PUT]
### List [GET]
### Update [POST]
### Delete [DELETE]

# Group Device Group
## Basic [/device/group]
### Add [PUT]
### List [GET]
### Update [POST]
### Delete [DELETE]

## Schedule [/device/group/schedule]

All devices in this group shoud do some action in scheduled time
### Add [PUT]
### List [GET]
### Update [POST]
### Delete [DELETE]

## Alarm on/off
All devices in this group shoud alarm on/off in scheduled time